USE sakila;
-- 1. List the number of films per category.
SELECT title, category.name
FROM film
INNER JOIN film_category
ON film.film_id = film_category.film_id
INNER JOIN category
ON film_category.category_id = category.category_id
;
-- 2. Retrieve the store ID, city, and country for each store.
SELECT store_id, city.city, country.country
FROM store
INNER JOIN address
ON store.address_id = address.address_id
INNER JOIN city
ON address.city_id = city.city_id
INNER JOIN country
ON city.country_id = country.country_id
;
-- 3. Calculate the total revenue generated by each store in dollars.
SELECT store_id,  CONcat('$', FORMAT(SUM(p.amount),2))  AS total_revenue
FROM staff
INNER JOIN payment p
ON staff.staff_id = p.staff_id 
GROUP BY store_id 
;
-- 4. Determine the average running time of films for each category.
SELECT ROUND(AVG(length),0) AS avg_time_minutes, category.name AS film_category
FROM film
INNER JOIN film_category
ON film.film_id = film_category.film_id
INNER JOIN category
ON film_category.category_id = category.category_id
GROUP BY category.name
;
-- Bonus:

-- 5. Identify the film categories with the longest average running time.
SELECT ROUND(AVG(length),0) AS avg_runtime_minutes, category.name AS film_category
FROM film
INNER JOIN film_category
ON film.film_id = film_category.film_id
INNER JOIN category
ON film_category.category_id = category.category_id
GROUP BY category.name
ORDER BY avg_runtime_minutes DESC
;

-- 6. Display the top 10 most frequently rented movies in descending order.
SELECT title, COUNT(r.rental_id)
FROM film
INNER JOIN inventory i
USING(film_id)
INNER JOIN rental r 
USING(inventory_id)
GROUP BY title
ORDER BY COUNT(r.rental_id) DESC
LIMIT 10
;

;
-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT title, film_id, i.inventory_id, i.store_id
FrOm film
InNeR JoIn inventory i
USING(film_id)
WhErE title = "Academy Dinosaur" AND i.store_id = 1
;
-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

SELECT DISTINCT title,
CASE 
	WHEN ISNULL(i.inventory_id) THEN "Not Available"
	ELSE "Available"
	END AS available
FROM film
LEFT JOIN inventory i
USING(film_id)


;




